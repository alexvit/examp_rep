View(df1)
df <- tbl(con, "got_chars")
object.size(df)
object.size(df1)
object.size(df)
df1 <- tbl(con, "got_chars") %>% collect()
df1 <- collect(tbl(con, "got_chars"))
df1
View(df1)
n_houses <- df_loc %>%
count(house)
df_loc <- collect(tbl(con, "got_chars"))
n_houses <- df %>%
count(house)
n_houses
n_houses <- df %>%
count(house) %>%
arrange(n)
n_houses
n_houses <- df %>%
count(house) %>%
arrange(-n)
n_houses
n_houses
n_houses <- df %>%
count(house) %>%
arrange(-n)
n_houses
n_houses <- df %>%
count(house) %>%
arrange(desc(n))
n_houses
show_query(n_houses)
df_loc <- df %>%
mutate(house2 = ifelse(house %in% n_houses$house[1:10],
house, "other"))
View(df_loc)
View(df_loc)
object.size(df_loc)
object.size(df)
df_loc <- collect(tbl(con, "got_chars"))
df_loc <- collect(df %>%
mutate(house2 = ifelse(house %in% n_houses$house[1:10],
house, "other")))
df_loc <- df_loc %>%
mutate(house2 = ifelse(house %in% n_houses$house[1:10],
house, "other")))
df_loc <- df_loc %>%
mutate(house2 = ifelse(house %in% n_houses$house[1:10],
house, "other"))
View(df_loc)
n_houses <- df %>%
count(house) %>%
arrange(desc(n)) %>%
collect
show_query(n_houses)
n_houses <- df %>%
count(house) %>%
arrange(desc(n))
show_query(n_houses)
n_houses <- collect(n_houses)
df_loc <- df_loc %>%
mutate(house2 = ifelse(house %in% n_houses$house[1:10],
house, "other"))
df_loc
count(df_loc)
df_loc %>%
count(house2)
n_houses
n_houses <- df %>%
mutate(house = na_if(house, "")) %>%
count(house) %>%
arrange(desc(n))
n_houses
n_houses <- collect(n_houses)
n_houses <- df %>%
count(house) %>%
arrange(desc(n))
show_query(n_houses)
n_houses <- collect(n_houses)
show_query(n_houses)
n_houses
n_houses <- n_houses %>%
mutate(house = na_if(house, ""))
n_houses
df_loc <- df_loc %>%
mutate(house2 = ifelse(house %in% n_houses$house[1:10],
house, "other"))
df_loc %>%
count(house2)
View(df_loc)
tmp <- sample(100,10)
x <- sample(100,10)
summary(x)
summary(x)[c(1, 4,6)]
stats <- function(x) {
summary(x)[c(1, 4,6)]
count(is.na(x))
}
stats(x)
sum(is.na(x))
stats(x)
stats <- function(x) {
summary(x)[c(1, 4,6)]
sum(is.na(x))
}
stats(x)
tmp <- vector(length = 5)
tmp <- vector(length = 5)
tmp[c(1,2,3)] <-  summary(x)[c(1, 4,6)]
tmp[4] <- sum(is.na(x))
tmp
tmp[5] <- length(x)
names(tmp) <- c("min", "mean", "max", "n_NA", "length")
return(tmp)
stats <- function(x) {
tmp <- vector(length = 5)
tmp[c(1,2,3)] <-  summary(x)[c(1,4,6)]
tmp[4] <- sum(is.na(x))
tmp[5] <- length(x)
names(tmp) <- c("min", "mean", "max", "n_NA", "length")
return(tmp)
}
stats(x)
x[12] <- NA
stats(x)
stats(tmp)
tmp <- sample(100,10)
x[12] <- NA
stats(tmp)
x[12] <- NA
stats(tmp)
tmp[12] <- NA
stats(tmp)
tmp <- sample(100,10)
tmp[12] <- NA
stats <- function(x) {
tmp <- vector(length = 5)
tmp[c(1,2,3)] <-  summary(x)[c(1,4,6)]
tmp[4] <- sum(is.na(x))
tmp[5] <- length(x)
names(tmp) <- c("min", "mean", "max", "n_NA", "length")
return(tmp)
}
stats(tmp)
tmp
tmp[5] <- NA
tmp <- sample(100,10)
tmp[5] <- NA
stats(tmp)
stats <- function(x) {
tmp <- vector(length = 5)
tmp[c(1,2,3)] <-  round(summary(x)[c(1,4,6)], 2)
tmp[4] <- sum(is.na(x))
tmp[5] <- length(x)
names(tmp) <- c("min", "mean", "max", "n_NA", "length")
return(tmp)
}
stats(tmp)
tmp[4] <- as.integer(sum(is.na(x)))
stats <- function(x) {
tmp <- vector(length = 5)
tmp[c(1,2,3)] <-  round(summary(x)[c(1,4,6)], 2)
tmp[4] <- as.integer(sum(is.na(x)))
tmp[5] <- length(x)
names(tmp) <- c("min", "mean", "max", "n_NA", "length")
return(tmp)
}
stats(tmp)
tmp[4] <- as.numeric(sum(is.na(x)))
stats <- function(x) {
tmp <- vector(length = 5)
tmp[c(1,2,3)] <-  round(summary(x)[c(1,4,6)], 2)
tmp[4] <- as.numeric(sum(is.na(x)))
tmp[5] <- length(x)
names(tmp) <- c("min", "mean", "max", "n_NA", "length")
return(tmp)
}
stats(tmp)
stats <- function(x) {
tmp <- vector(length = 5)
tmp[c(1,2,3)] <-  round(summary(x)[c(1,4,6)], 2)
tmp[4] <- as.double(sum(is.na(x)))
tmp[5] <- length(x)
names(tmp) <- c("min", "mean", "max", "n_NA", "length")
return(tmp)
}
stats(tmp)
stats <- function(x) {
tmp <- vector(length = 5)
tmp[c(1,2,3)] <-  round(summary(x)[c(1,4,6)], 2)
tmp[4] <- sum(is.na(x))
tmp[5] <- length(x)
names(tmp) <- c("min", "mean", "max", "n_NA", "length")
return(tmp)
}
stats(tmp)
age_stats <- df %>%
group_by(house2) %>%
map(stats(age))
age_stats <- df %>%
group_by(house2) %>%
map(.$age, stats)
age_stats <- df %>%
group_by(house2) %>%
map(.$age, stats())
age_stats <- df %>%
group_by(house2) %>%
map(.$age, stats())
stats(tmp)
age_stats <- df %>%
group_by(house2) %>%
do(stats(.$age))
age_stats <- df_loc %>%
group_by(house2) %>%
do(stats(.$age))
age_stats <- df_loc %>%
group_by(house2) %>%
do(stats(.$age))
age_stats <- df_loc %>%
group_by(house2) %>%
do(data_frame(stats(.$age)))
age_stats
age_stats <- df_loc %>%
group_by(house2) %>%
do(as.list(stats(.$age)))
age_stats <- df_loc %>%
group_by(house2) %>%
do(data.frame(stats(.$age)))
age_stats
age_stats <- df_loc %>%
group_by(house2) %>%
do(data.frame(stat = name(stat), value = stats(.$age)))
age_stats <- df_loc %>%
group_by(house2) %>%
do(data.frame(stat = names(stat), value = stats(.$age)))
age_stats <- df_loc %>%
group_by(house2) %>%
do(data.frame(stat = names(stats), value = stats(.$age)))
age_stats <- df_loc %>%
group_by(house2) %>%
do(data.frame(value = stats(.$age)))
age_stats
library(data.table)
as.data.table(df_loc)[, stats(age), by = house2]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(dbplyr)
con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(),
user = "students",
password = "pmsar2017",
dbname = "pmsar",
host = "18.195.181.180",
port = 5432
)
df <- tbl(con, "got_chars")
df_loc <- collect(tbl(con, "got_chars"))
object.size(df_loc)
object.size(df)
n_houses <- df %>%
count(house) %>%
arrange(desc(n))
show_query(n_houses)
# Не был уверен, как это работает. Судя по размеру файлов, действительно,
object.size(df_loc)
# Но фактически, это пока только запись SQL запроса:
show_query(n_houses)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr)
con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(),
user = "students",
password = "pmsar2017",
dbname = "pmsar",
host = "18.195.181.180",
port = 5432
)
df <- tbl(con, "got_chars")
df_loc <- collect(tbl(con, "got_chars"))
# Не был уверен, как это работает. Судя по размеру файлов, действительно,
# df_loc - файл в локальном окружении, а df содержит только сведения о подключении.
object.size(df_loc)
object.size(df)
# Здесь я создаю запрос в базу данных с использованием синтаксиса диплайар. Считаю частотность каждого дома и сортирую результаты в убывающем порядке. В результате должна получиться табличка с двумя переменными - названия дома и частота.
n_houses <- df %>%
count(house) %>%
arrange(desc(n))
# Но фактически, это пока только запись SQL запроса:
show_query(n_houses)
# При помощи функции collect() запрашиваю результат вычислений в окружение.
n_houses <- collect(n_houses)
n_houses
# Теперь обнаружилось, что наблюдения с пустой строчкой распознаются как один из домов. Преобразую эти значения в NA.
n_houses <- n_houses %>%
mutate(house = na_if(house, ""))
# Дальше работаю только с локальными данными. Если название дома в большой таблице встречается в колонке house в первых десяти строчках таблички с частотами, оставляю название дома.
df_loc <- df_loc %>%
mutate(house2 = ifelse(house %in% n_houses$house[1:10],
house, "other"))
df_loc %>%
count(house2)
stats <- function(x) {
tmp <- vector(length = 5)
tmp[c(1,2,3)] <-  round(summary(x)[c(1,4,6)], 2)
tmp[4] <- sum(is.na(x))
tmp[5] <- length(x)
names(tmp) <- c("min", "mean", "max", "n_NA", "length")
return(tmp)
}
tmp <- sample(100,10)
tmp[5] <- NA
stats(tmp)
age_stats <- df_loc %>%
group_by(house2) %>%
do(data.frame(value = stats(.$age)))
age_stats
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr)
con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(),
user = "students",
password = "pmsar2017",
dbname = "pmsar",
host = "18.195.181.180",
port = 5432
)
df <- tbl(con, "got_chars")
df_loc <- collect(tbl(con, "got_chars"))
# Не был уверен, как это работает. Судя по размеру файлов, действительно,
# df_loc - файл в локальном окружении, а df содержит только сведения о подключении.
object.size(df_loc)
object.size(df)
# Здесь я создаю запрос в базу данных с использованием синтаксиса диплайар. Считаю частотность каждого дома и сортирую результаты в убывающем порядке. В результате должна получиться табличка с двумя переменными - названия дома и частота.
n_houses <- df %>%
count(house) %>%
arrange(desc(n))
# Но фактически, это пока только запись SQL запроса:
show_query(n_houses)
# При помощи функции collect() запрашиваю результат вычислений в окружение.
n_houses <- collect(n_houses)
n_houses
# Теперь обнаружилось, что наблюдения с пустой строчкой распознаются как один из домов. Преобразую эти значения в NA.
n_houses <- n_houses %>%
mutate(house = na_if(house, ""))
# Дальше работаю только с локальными данными. Если название дома в большой таблице встречается в колонке house в первых десяти строчках таблички с частотами, оставляю название дома.
df_loc <- df_loc %>%
mutate(house2 = ifelse(house %in% n_houses$house[1:10],
house, "other"))
df_loc %>%
count(house2)
stats <- function(x) {
tmp <- vector(length = 5)
tmp[c(1,2,3)] <-  round(summary(x)[c(1,4,6)], 2)
tmp[4] <- sum(is.na(x))
tmp[5] <- length(x)
names(tmp) <- c("min", "mean", "max", "n_NA", "length")
return(tmp)
}
tmp <- sample(100,10)
tmp[5] <- NA
stats(tmp)
age_stats <- df_loc %>%
group_by(house2) %>%
do(data.frame(value = stats(.$age)))
age_stats
df_loc %>%
filter(house == "House Greyjoy") %>%
summarise(min_age = min(age),
mean_age = mean(age, na.rm = T),
max_age = max(age),
sum_na = sum(is.na(age)),
)
df_loc %>%
filter(house == "House Greyjoy") %>%
summarise(min_age = min(age, na.rm = T),
mean_age = mean(age, na.rm = T),
max_age = max(age, na.rm = T),
sum_na = sum(is.na(age)),
)
df_loc %>%
filter(house == "House Greyjoy") %>%
summarise(min_age = min(age, na.rm = T),
mean_age = mean(age, na.rm = T),
max_age = max(age, na.rm = T),
sum_na = sum(is.na(age)),
n = n()
)
age_stats
df_loc %>%
filter(house == "House Greyjoy") %>%
summarise(min_age = min(age, na.rm = T),
mean_age = mean(age, na.rm = T),
max_age = max(age, na.rm = T),
sum_na = sum(is.na(age)),
n = n()
)
df_loc %>%
group_by(house) %>%
summarise(min_age = min(age, na.rm = T),
mean_age = mean(age, na.rm = T),
max_age = max(age, na.rm = T),
sum_na = sum(is.na(age)),
n = n()
)
df_loc %>%
group_by(house2) %>%
summarise(min_age = min(age, na.rm = T),
mean_age = mean(age, na.rm = T),
max_age = max(age, na.rm = T),
sum_na = sum(is.na(age)),
n = n()
)
# Или, если нужно посчитать что-то нетривиальное несколько раз и не хочется это копипастить в summarise, можно доставать результаты функции по-отдельности:
df_loc %>%
group_by(house2) %>%
summarise(min = stats(age)[1],
max = stats(age)[3])
library(tidyverse)
2^5
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr)
con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(),
user = "students",
password = "pmsar2017",
dbname = "pmsar",
host = "18.195.181.180",
port = 5432
)
df <- tbl(con, "got_chars")
df_loc <- collect(tbl(con, "got_chars"))
# Не был уверен, как это работает. Судя по размеру файлов, действительно,
# df_loc - файл в локальном окружении, а df содержит только сведения о подключении.
object.size(df_loc)
object.size(df)
# Здесь я создаю запрос в базу данных с использованием синтаксиса диплайар. Считаю частотность каждого дома и сортирую результаты в убывающем порядке. В результате должна получиться табличка с двумя переменными - названия дома и частота.
n_houses <- df %>%
count(house) %>%
arrange(desc(n))
# Но фактически, это пока только запись SQL запроса:
show_query(n_houses)
# При помощи функции collect() запрашиваю результат вычислений в окружение.
n_houses <- collect(n_houses)
n_houses
# Теперь обнаружилось, что наблюдения с пустой строчкой распознаются как один из домов. Преобразую эти значения в NA.
n_houses <- n_houses %>%
mutate(house = na_if(house, ""))
# Дальше работаю только с локальными данными. Если название дома в большой таблице встречается в колонке house в первых десяти строчках таблички с частотами, оставляю название дома.
df_loc <- df_loc %>%
mutate(house2 = ifelse(house %in% n_houses$house[1:10],
house, "other"))
df_loc %>%
count(house2)
x <- 1:10
stat <- function (x) {
print(x[1])
}
stat(x)
stat <- function (x) {
print(x[1]),
print(x)[2]
}
stat <- function (x) {
print(x[1]),
print(x[2])
}
stat <- function (x) {
print(x[1]),
print(x[2])
}
stat <- function (x) {
print(x[1])
print(x[2])
}
stat(x)
stat(x)
stat <- function (x) {
list(print(x[1]),
print(x[2]))
}
stat(x)
stat <- function (x) {
list(print(x[1]),
print(x[2]))
lenth(x)
}
stat(x)
stat <- function (x) {
list(print(x[1]),
print(x[2]))
length(x)
}
stat(x)
min(x)
meann(x)
mean(x)
library(jsonlite)
fromJSON("tst_json.json")
library(httr)
url <- "http://api.wunderground.com/api/028f89195b31e5b5/conditions/q/RU/Moscow.json"
weather_json <- GET(url = url, timeout(10)) %>% content()
weather_json
weather_json[[2]]
weather_json[[3]]
weather_json[[1]]
weather_json[[2]]
weather_json[[2]]$temp_f
url <- "http://api.wunderground.com/api/028f89195b31e5b5/conditions/q/RU/Tomsk.json"
weather_json <- GET(url = url, timeout(10)) %>% content()
weather_json[[2]]$temp_f
weather_json[[2]]$temperature_string
